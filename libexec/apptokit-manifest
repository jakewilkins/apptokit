#!/bin/bash
# Usage: apptokit manifest <show|drop> [key type]
# Summary: Work with the cached manifest settings for this Apptokit ENV
# provide apptokit completions
# Help:
#   Show or remove entries from the cached manifest settings. Useful if you find yourself in
#   a bad state.
#
#   create      -  create App from the manifest
#   show        -  list entries in the cache
#   install     -  install the App on an account
#   edit        -  edit entries in the cache
#   drop        -  remove entries from the cache
#

if [[ "$1" == "--complete" ]]; then
  echo "setup"
  echo "show"
  echo "drop"
  echo "install"
  echo "edit"
  echo "create"
  exit
else
  if [[ ! "$1" =~ ^(show|drop|create|edit|install|setup)$ ]]; then
    (>&2 echo "invalid manifest command '$1'")
    apptokit help manifest
    exit 4
  fi
  exec "$(which ruby)" "$0" "$@"
fi

#!ruby

require "setup"

config_loader = Apptokit::ConfigLoader.new
config_loader.load_from_config!
manifest = config_loader.manifest_data

if manifest.nil?
  puts "This environment is not configured as a manifest. Please specify 'manifest' settings."
  exit
end

def create(manifest, config_loader)
  unless manifest == :unavailable
    puts "Manifest already created, run `manifest drop` to remove it. Printed below for reference:"
    pp manifest
    exit
  end

  begin
    _, manifest = Apptokit::ManifestApp.create(config_loader)
  rescue Apptokit::ApptokitError => boom
    raise boom unless boom.type == :manifest_creation_failed
    $stderr.puts boom.message
    exit 6
  end
  puts "Manifest App created for #{config_loader.env}"
  pp manifest
end

def install(config_loader)
  installation_id = Apptokit::ManifestApp.install(config_loader, {})
  puts "#{config_loader.env} installed, installation id: #{installation_id}"
end

case ARGV.shift
when "create"
  create(manifest, config_loader)
when "install"
  install(config_loader)
  exit Apptokit::RELOAD_ENV_EXIT_CODE
when "setup"
  create(manifest, config_loader)
  install(config_loader)
  exit Apptokit::RELOAD_ENV_EXIT_CODE
when "show"
  puts "Manifest for env: #{config_loader.env}"
  unless manifest == :unavailable
    pp manifest
  else
    puts "Manifest App not created, configured with"
    pp config_loader.fetch('manifest')
  end
when "edit"
  puts "Editing manifest for env: #{config_loader.env}"
  unless manifest == :unavailable
    Tempfile.create("apptokit-#{config_loader.env}") do |f|
      f.sync = true
      f.puts JSON.pretty_generate(manifest)

      system(ENV["EDITOR"], f.path)
      f.rewind
      updated_conf = File.read(f.path)
      updated_conf = begin
        JSON.parse(updated_conf)
      rescue JSON::ParserError => boom
        puts "Error parsing JSON: #{boom.message}\n#{updated_conf}"
        exit 18
      end
      Apptokit::ManifestApp.persist_to_cache(config_loader.env, updated_conf)
    end
    puts "done."
  else
    puts "Manifest App not created, edit config in your apptokit.yml"
  end
when "drop"
  puts "dropping manifest for env: #{config_loader.env}"
  Apptokit::ManifestApp.delete_cache(config_loader)
  puts "done."

  exit Apptokit::RELOAD_ENV_EXIT_CODE
end

# vim: set ft=ruby:
