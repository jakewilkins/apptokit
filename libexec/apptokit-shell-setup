#!/usr/bin/env bash
set -e

print=""
if [ "$1" = "-" ]; then
  print=1
  shift
fi

shell="$1"
if [ -z "$shell" ]; then
  shell="$(basename "$SHELL")"
fi

resolve_link() {
  $(type -p greadlink readlink | head -1) $1
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

root="$(abs_dirname "$0")/.."

if [ -z "$print" ]; then
  case "$shell" in
  bash )
    profile='~/.bash_profile'
    _type="type"
    ;;
  zsh )
    profile='~/.zshenv'
    _type="/usr/bin/type"
    ;;
  * )
    profile='your profile'
    _type="type"
    ;;
  esac

  { echo "# Load apptokit automatically by adding"
    echo "# the following to ${profile}:"
    echo
    echo "$_type -t _apptokit_wrapper 2>&1 >/dev/null || eval \"\$(${_APPTOKIT_ROOT}/bin/apptokit shell-setup -)\""
    echo
  } >&2

  exit 1
fi

if [[ "$PATH" != *"${_APPTOKIT_ROOT}/bin"* ]]; then
  echo "export PATH=\"\${PATH}:${_APPTOKIT_ROOT}/bin\""
fi

case "$shell" in
bash | zsh )
  echo "source \"$root/completions/apptokit.${shell}\""
  ;;
esac

commands=(`apptokit commands --sh`)
IFS="|"
cat <<EOS
_apptokit_clear_env() {
  unset APPTOKIT_GITHUB_URL APPTOKIT_GITHUB_API_URL APPTOKIT_APP_ID APPTOKIT_INSTALLATION_ID APPTOKIT_PRIVATE_KEY_PATH APPTOKIT_WEBHOOK_SECRET APPTOKIT_CLIENT_ID APPTOKIT_CLIENT_SECRET APPTOKIT_INSTALLATION_KEYCACHE_EXPIRY APPTOKIT_USER_KEYCACHE_EXPIRY APPTOKIT_PERSONAL_ACCESS_TOKEN APPTOKIT_USER_AGENT APPTOKIT_COOKIE APPTOKIT_ACCEPT_HEADER APPTOKIT_LOADED_ENV APPTOKIT_DEFAULT_ENV APPTOKIT_PRIVATE_KEY
  return 0
}
_apptokit_reload_env() {
  _apptokit_clear_env
  while read line; do
    export \$line
  done < <(ruby -I$APPTOKIT_RUBY_SHARE_PATH -rsetup -e "puts Apptokit::ConfigLoader.to_shell")
}
_apptokit_wrapper() {
  if [[ "\$1 \$2" == "env clear" ]]; then
    _apptokit_clear_env
    unset GH_ENV
    return 0
  fi

  local set_env=0

  if [[ "\$1 \$2" == "env set" ]]; then
    _apptokit_clear_env
    if [[ -z "\$3" ]]; then
      echo "usage: apptokit env set <environment name"
      return 1
    fi
    shift; shift
    export GH_ENV="\$1"
    shift
    1="env"
  fi

  if [[ -z "\$GH_ENV" && ! -z "\$APPTOKIT_DEFAULT_ENV" ]]; then
    local GH_ENV="\$APPTOKIT_DEFAULT_ENV"
  fi

  local old_ifs="$IFS"
  IFS=
  if [[ -z "\$APPTOKIT_LOADED_ENV" || "\$APPTOKIT_LOADED_ENV" != "\$GH_ENV" ]]; then
    _apptokit_reload_env
  fi
  IFS="\$old_ifs"

  local command="\$1"
  if [ "\$#" -gt 0 ]; then
    shift
  fi

  case "\$command" in
  ${commands[*]})
    eval \`apptokit "sh-\$command" "\$@"\`;;
  *)
    command apptokit "\$command" "\$@"
    exit_status="\$?"

    if [[ "\$exit_status" == "234" ]]; then
      echo "Reloading env..."
      _apptokit_reload_env
    else
      return "\$exit_status"
    fi
  ;;
  esac
}
EOS

# zsh can't pass argument with aliases, but bash can.
# zsh can have functions with the name being only numbers, but bash can't.
# fix both cases here by letting zsh have a function, and bash have its alias.
case "$shell" in
bash )
  echo "alias apptokit=_apptokit_wrapper"
  ;;
zsh )
  echo "alias apptokit=_apptokit_wrapper"
  # echo "apptokit=_apptokit_wrapper"
  ;;
esac
