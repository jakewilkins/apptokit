#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage: apptokit init <path|--global> [--env=env]
# Summary: Generate a .apptokit.yml or add a new App environment
# Help: This command will provide you with a starting point to use Apptokit,
# Or, if you're already up and running will provide you with a template for adding
# a new Apptokit environment.
#
#
# Examples:
#
#    apptokit init .                   # Generates a basic apptokit.yml config
#    apptokit init . --env test        # Will add a "test" environment to your existing
#                                        config or generate a config with a test environment
#    apptokit init --global            # Generate a new apptokit.yml config in ~/.config/
#    apptokit init --global --env test # Add a "test" environment config in ~/.config/
require "setup"
require "pathname"
require "yaml"
require "fileutils"
require "erb"

full_template = Apptokit::Configuration::SHARE_DIR.join("apptokit-full-template.yml")

def show_help(msg = nil)
  puts msg if msg
  puts `apptokit help init`
  exit 1
end

if ARGV[0] == "initial-setup"
  yaml_path = Pathname.new(ENV['HOME']).join(".config/apptokit.yml")
  FileUtils.cp(full_template, yaml_path, verbose: true) unless yaml_path.exist?
  exit
end

show_help("For init you must specify either a path or --global") if ARGV.empty?

filename = ".apptokit.yml"
global_flag = %w(--global -g)
dir = if (global_index = ARGV.index { |a| global_flag.include?(a) })
  filename = "apptokit.yml"
  ARGV.delete_at(global_index)
  puts "here!"
  Pathname.new(ENV["HOME"]).join(".config")
elsif ARGV[0] == "."
  ARGV.shift
  Dir.pwd
else
  ARGV.shift
end

puts "dir = #{dir}"

env_flags = %(--env -e)
if (env_index = ARGV.index { |arg| env_flags.include?(arg) })
  env = ARGV[env_index + 1]
  ARGV.delete_at(env_index)
  ARGV.delete_at(env_index + 1)
elsif ARGV.shift
  env = ARGV.shift
end

dir = Pathname.new(dir)

show_help("Must specify an existing path -- '#{dir}' does not exist") unless dir.exist?

yaml_path = dir.join(filename)
backup_yaml_path = "#{yaml_path}.bac"

existing = yaml_path.exist?

if existing && !env
  print "Overwrite existing config at '#{yaml_path}'? (Y/n) "
  ans = gets.chomp
  if ans.upcase != "Y"
    show_help("Not overwriting...")
  else
    puts "Archiving original to .bac because we ❤️  you..."
    FileUtils.mv(yaml_path, backup_yaml_path, verbose: true)

    at_exit do
      if !yaml_path.exist? && File.exist?(backup_yaml_path)
        puts "Something went wrong and we're exiting without a .apptokit.yml, attempting to restore backup..."
        FileUtils.mv(backup_yaml_path, yaml_path, verbose: true)
      end
    end
  end
end

if existing && env
  puts "Updating .apptokit.yml..."
else
  puts "Creating .apptokit.yml..."
  FileUtils.cp(full_template, yaml_path)
end

if env
  env_template = Apptokit::Configuration::SHARE_DIR.join("apptokit-env-template.yml")
  if existing
    existing_conf = YAML.load_file(yaml_path, aliases: true)
    if existing_conf.key?(env)
      warn "WARNING: duplicate env '#{env}', this configuration will replace previously existing '#{env}' env when parsed by YAML."
    end
  end

  env_out = ERB.new(File.read(env_template)).result(binding)

  File.open(yaml_path, "a+") do |file|
    file.puts env_out
  end
end
puts "\ndone. Fill in

#{yaml_path}

with your GitHub App specifics.
✨"
