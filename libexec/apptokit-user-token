#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage: apptokit user-token [--no-auto-open] [--force] [--code=<oauth code>] [--user=<user>]
# Summary: Generate an User-Server token for a GitHub App installation.
# Help: This command will attempt to auto generate a User authenticated token for a GitHub App.
#
# NOTE: This requires using your browser and specific configuration of your GitHub App.
#
#  This generates a token by walking your browser through the OAuth flow and grabbing the OAuth
#  provided.
#
#  Your App must have a Callback URL specified in you Application settings that
#  is specified by the Apptokit options:
#
#     - oauth_callback_port:     defaults to 8075
#     - oauth_callback_bind:     defaults to localhost
#     - oauth_callback_path:     defaults to /callback
#     - oauth_callback_hostname: defaults to localhost
#
#  Further, as this authenticates using your browser session the token will be
#  issued to the User that is logged in in your browser.
#
#  This command can auto open your browser (used value in $BROWSER, on MacOS this is `open`)
#  or if you need it to specify --no-auto-open and it will provide you a URL to open.

require "setup"
require "apptokit/user_token"
require 'optparse'

options = { force: false, auto_open: true, user: nil, code: nil }
OptionParser.new do |opts|
  opts.on("-f", "--force", "Don't use a cached token")

  opts.on("-n", "--no-auto-open", "Don't automatically open the browser window")

  opts.on("-uUSER", "--user=USER", "The user to authorize")

  opts.on("-cCODE", "--code=CODE", "The OAuth code received from GitHub")

  opts.on("-g", "--get-code", "Authorize user for OAuth code from GitHub and exit")

  opts.on("-r [TOKEN]", "--refresh-token [TOKEN]", "The OAuth refresh token received from GitHub when access token is issued.")
end.parse!(into: options)

DummyToken = Struct.new(:token) do
  def header
    "token #{token}"
  end

  def token_type
    "bearer"
  end

  def refresh_token
    nil
  end
end

if options.key?(:"no-auto-open")
  options.delete(:"no-auto-open")
  options[:auto_open] = false
end

begin
  token = ENV["APPTOKIT_USER_TOKEN"] && DummyToken.new(ENV["APPTOKIT_USER_TOKEN"])
  token ||= if options.key?(:"refresh-token")
    Apptokit::UserToken.refresh(token: options[:"refresh-token"])
  elsif options.key?(:"get-code")
    Apptokit::UserToken.get_code(auto_open: options[:auto_open], user: options[:user])
  else
    Apptokit::UserToken.generate(**options)
  end
rescue Apptokit::ApptokitError => e
  $stderr.puts e.message
  exit 5
end

if token.error?
  $stderr.puts token.error_description
  exit 10
end

if options[:"get-code"]
  if $stdout.isatty
    puts "Your OAuth code: #{token.oauth_code}"
  else
    print token.oauth_code
  end
  exit 0
end

if $stdout.isatty
  puts "Your token:"
  puts token.token
  puts "Token type: #{token.token_type}"
  if token.refresh_token
    puts "Expires in: #{token.expires_in}"
    puts "Refresh token:\n#{token.refresh_token}"
    puts "Refresh token expires in: #{token.refresh_token_expires_in}"
  end
else
  print token.header
end
