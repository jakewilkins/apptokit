#!/bin/bash
# Usage: apptokit <authentication type> [request method] path/of/request [curl opts]
# Summary: Perform a curl command authenticated as a GitHub App.
# provide apptokit completions
# Help:
#  <authentication type> should be one of:
#     - app:           Perform a request using the GitHub App JWT to authenticate.
#     - installation:  Perform a Server-Server request as a GitHub App installation.
#     - user:          Perform a User-Server request. Note: this might require browser interaction.
#     - pat:           Not a GitHub App request, curl using a Personal Access Token. Userful for 
#
#  [request method] can be used to specify the HTTP request method, or you can always set it in Curl opts
#
#  Any options passed after the path of your request will be forwarded on to the Curl command.

set -e

request_methods=("get" "post" "put" "patch" "delete" "GET" "POST" "PUT" "PATCH" "DELETE")
request_types=("app" "installation" "user" "pat")

if [[ "$1" == "--complete" ]]; then

  request_type="$(echo -e "${2}" | tr -d '[:space:]')"
  if [[ ! " ${request_types[@]} " =~ " ${request_type} " ]]; then
    for i in "${request_types[@]}"; do
       echo "$i"
    done
    exit
  fi

  request_method="$(echo -e "${3}" | tr -d '[:space:]')"
  if [[ ! " ${request_methods[@]} " =~ " ${request_method} " ]]; then
    echo "GET"
    echo "POST"
    echo "PUT"
    echo "PATCH"
    echo "DELETE"
  fi

  if [[ "$OSTYPE" =~ "darwin" ]]; then
    clipboard_contents=$(pbpaste)
    http="${clipboard_contents:0:4}"

    if [ "$http" = "http" ]; then
      echo $clipboard_contents
    fi
  fi

  if [[ "$request_type" == "app" ]]; then
    echo "installations/:installation_id/access_tokens"
  elif [[ "$request_type" == "installation" ]]; then
    echo "installation/repositories"
  elif [[ "$request_type" == "user" ]]; then
    echo "user/installations"
  fi

  exit
fi

# set -x

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "usage: $0 "
  echo
fi

defaults=$(ruby -rsetup -e "print Apptokit.config.accept_header;print '~'; print Apptokit.config.user_agent; print '~'; print Apptokit.config.personal_access_token; print '~'; print Apptokit.config.github_api_url; print '~'; print Apptokit.config.cookie")
config_header=`echo $defaults | cut -d '~' -f 1`
# echo $config_header
user_agent=`echo $defaults | cut -d '~' -f 2`
# echo $user_agent
pat=`echo $defaults | cut -d '~' -f 3`
# echo $pat
github_url=`echo $defaults | cut -d '~' -f 4`
# echo $github_url
cookie=`echo $defaults | cut -d '~' -f 5`
# echo $cookie
PREVIEW_HEADER=${PREVIEW_HEADER:-$config_header}

request_type=$1

case "$request_type" in
  "user")
    auth="$(apptokit user-token)"
    ;;
  "installation")
    auth="$(apptokit installation-token)"
    ;;
  "app")
    auth="$(apptokit app-token)"
    ;;
  "pat")
    auth="token $pat"
    ;;
  *)
    echo "You have to specify an authentication type for apptokit curl:"
    apptokit help curl
    exit 12
esac
shift

if [[ " ${request_methods[@]} " =~ " ${1} " ]]; then
  request_method="-X $(echo $1 | tr "[:lower:]" "[:upper:]")"
  shift
fi

path=$1
shift

if [ -z "$path" ]; then
  (>&2 echo "You have to specify a path for apptokit curl:")
  apptokit help curl
  exit 13
fi

if [[ "$path" != *http* ]]; then
  joiner=$([ ${path:0:1} == "/" ] && echo "" || echo "/")
  path="$github_url$joiner$path"
fi

if [[ "$cookie" != "" ]]; then
	cookie_arg=""
	IFS=';' read -ra cookie_values <<< "$cookie"
	for this_cookie in "${cookie_values[@]}"; do
		# process "$i"
		cookie_arg="$cookie_arg --cookie $this_cookie"
	done
else
	cookie_arg=""
fi

USER_AGENT=${USER_AGENT:-$user_agent}

curl $request_method --user-agent "$USER_AGENT" $cookie_arg -H "Authorization: $auth" -H "Accept: $PREVIEW_HEADER" "$@" $path
